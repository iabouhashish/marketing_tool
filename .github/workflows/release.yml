name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || inputs.version }}
        release_name: Release ${{ github.ref_name || inputs.version }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        body: |
          ## What's Changed
          
          This release includes:
          - Bug fixes and improvements
          - Updated dependencies
          - Enhanced security features
          
          ## Installation
          
          ```bash
          pip install marketing-project==${{ github.ref_name || inputs.version }}
          ```
          
          ## Docker
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name || inputs.version }}
          ```
          
          ## Full Changelog
          
          See the [changelog](CHANGELOG.md) for detailed information about changes in this release.
          
    - name: Upload Package Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/marketing_project-*.whl
        asset_name: marketing_project-${{ github.ref_name || inputs.version }}-py3-none-any.whl
        asset_content_type: application/octet-stream
        
    - name: Upload Source Distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/marketing_project-*.tar.gz
        asset_name: marketing_project-${{ github.ref_name || inputs.version }}.tar.gz
        asset_content_type: application/gzip

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.publish-pypi.result == 'success'
      run: |
        echo "‚úÖ Release ${{ github.ref_name }} published successfully!"
        echo "üì¶ PyPI: https://pypi.org/project/marketing-project/"
        echo "üê≥ Docker: ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
        
    - name: Notify Failure
      if: needs.publish-pypi.result == 'failure'
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "Check the logs for details."
